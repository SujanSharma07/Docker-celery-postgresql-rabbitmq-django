version: '3.5'
services:
  django:
    image: ghcr.io/sujansharma07/docker-celery-postgresql-rabbitmq-django:latest
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    # image: sujan/celery:0.1
    container_name: celery
    volumes:
      - ./project/:/code # maps host directory to internal container directory
    ports: 
      - 8034:8000 # maping 8034 port of my device to containers 8000 port
    depends_on:
      - broker
      - db
    tty: false

    # command: "python manage.py runserver 0.0.0.0:8111 "
    command: "gunicorn mysite.wsgi:application --bind 0.0.0.0:8111 --log-level info --access-logfile=/code/logs/testing.log --error-logfile=/code/logs/error.log"
  nginx:
    image: nginx
    volumes:
      - ./project/assets:/usr/src/app/staticfiles
      #- ./nginx/static:/usr/src/app/staticfiles
      - ./nginx/media:/usr/src/app/mediafiles
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    container_name: project_nginx
    ports:
      - 8000:80
    depends_on:
      - django

    restart: always
           
  broker:
    image: rabbitmq:3-management

    hostname: rabbit
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass
    ports:
      - 5672:5672  
      - 15672:15672  # here, we can access rabbitmq management plugin

  db:
    image: postgres
    container_name: project_db
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./postgres/data:/var/lib/postgresql/data:consistent
    restart: always

  # worker:
  #   image: ghcr.io/sujansharma07/docker-celery-postgresql-rabbitmq-django:latest
  #   command: ["celery", "-A", "mysite", "worker", "-l", "info"]
 
  #   depends_on:
  #     - broker  
  #     - db

  worker:
    image: ghcr.io/sujansharma07/docker-celery-postgresql-rabbitmq-django:latest
    container_name: celery_worker
    command: celery -A mysite worker --loglevel=info -f /code/logs/celery.log
    environment:
      DJANGO_SETTINGS_MODULE: mysite.settings
    volumes:
      - ./logs:/var/logs
      - ./project:/code
    depends_on:
      - db
      - broker
    restart: always

  celerybeat:
    image: ghcr.io/sujansharma07/docker-celery-postgresql-rabbitmq-django:latest
    container_name: project_celerybeat
    command: celery -A mysite beat --loglevel=info -f /code/logs/celery.log --pidfile=
    environment:
      DJANGO_SETTINGS_MODULE: mysite.settings
    volumes:
      - ./logs:/var/logs
      - ./project:/code
    depends_on:
      - worker
      - broker
      - db
    restart: always
    # ports:
    #   - 5432:5432  

  portainer:
    image: 'portainer/portainer'
    container_name: project_portainer
    ports:
      - 8133:8000
      - 8933:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer/data:/data
  # # RabbitMQ - queue
  # rabbit:
  #   hostname: rabbit
  #   image: rabbitmq:3-management
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=admin
  #     - RABBITMQ_DEFAULT_PASS=mypass
  #   ports:
  #     - "5672:5672"  
  #     - "15672:15672"  # here, we can access rabbitmq management plugin



  
      

      
    # RABBITMQ_DEFAULT_USER=user
    # RABBITMQ_DEFAULT_PASS=password
    # CELERY_BROKER=amqp://user:password@broker:5672
    # FLOWER_BROKER=amqp://user:password@broker:5672

#   db:
#     image: postgres
#     env_file:
#       - .env
#     networks:
#       - webappnetwork
#   web:
#     build: ./amplypix
#     volumes:
#       - ./amplypix/:/code # maps host directory to internal container directory
#     env_file:
#       - .env
#     ports:
#       - "8000:8000"
#     command: bash -c "sleep 7; python3 /code/manage.py migrate --noinput && python3 /code/manage.py runserver 0.0.0.0:8000"
#     depends_on:
#       - db
#     networks:
#       - webappnetwork
# networks:
#   webappnetwork:
#       driver: bridge
